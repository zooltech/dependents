<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>tech.zool</groupId>
    <artifactId>env</artifactId>
    <version>0.1-SNAPSHOT</version>
  </parent>
  <groupId>tech.zool</groupId>
  <artifactId>DevDemos-dependents</artifactId>
  <version>0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>Java Demos dependents</name>
  <description>样例代码依赖组件</description>

  <!-- 编译参数、框架、套件版本定义 -->
  <properties>
    <httpclient.ver>4.5.10</httpclient.ver>
    <hibernate.ver>5.4.6.Final</hibernate.ver>
    <quartz.ver>2.3.2</quartz.ver>
    <poi.ver>4.1.0</poi.ver>
    <pulsar.ver>2.4.1</pulsar.ver>
    <ES.ver>7.4.0</ES.ver>
    <jackson.ver>2.10.0</jackson.ver>
    <!-- 1.7.x需要java 1.5以上；2.x需要java 8以上 -->
    <slf4j.ver>1.7.28</slf4j.ver>
    <!-- 2.3及以下支持java 1.6；2.4及以后版本需要java 7以上 -->
    <log4j.ver>2.12.1</log4j.ver>
    <junit.ver>5.5.2</junit.ver>
  </properties>

  <!-- 环境配置 -->
  <scm>
    <connection>scm:git:https://code.aliyun.com/zool/samples.git</connection>
    <developerConnection>scm:git:https://code.aliyun.com/zool/samples.git</developerConnection>
    <url />
  </scm>

  <issueManagement>
    <system>JIRA</system>
    <url></url>
  </issueManagement>
  <ciManagement>
    <system></system>
    <url></url>
    <notifiers />
  </ciManagement>

  <!-- 依赖管理 -->
  <dependencyManagement>
    <dependencies>
      <!-- 单元测试 -->
      <!-- <dependency><groupId>org.junit</groupId><artifactId>junit-bom</artifactId><version>${junit.ver}</version><type>pom</type><scope>import</scope></dependency> -->
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>${junit.ver}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-params</artifactId>
        <version>${junit.ver}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.testng</groupId>
        <artifactId>testng</artifactId>
        <version>7.0.0</version>
        <scope>test</scope>
      </dependency>
      <!-- 因为jmockit需要在测试编译器设置javaagent，所以，直接在用到的项目中管理。 <dependency> <groupId>org.jmockit</groupId> <artifactId>jmockit</artifactId> 
        <version>1.47</version> <scope>test</scope> </dependency> -->
      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>3.1.0</version>
        <scope>test</scope>
      </dependency>

      <!-- logging -->
      <dependency>
        <!-- 1.7.x需要java 1.5以上；2.x需要java 8以上 -->
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${slf4j.ver}</version>
      </dependency>
      <dependency>
        <!-- 使用java.util.logging -->
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-jdk14</artifactId>
        <version>${slf4j.ver}</version>
        <scope>runtime</scope>
      </dependency>

      <!-- log4j 2 性能最好。与slf4j配和使用会降低些性能，但灵活性好 -->
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-api</artifactId>
        <version>${log4j.ver}</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-core</artifactId>
        <version>${log4j.ver}</version>
        <scope>runtime</scope>
      </dependency>
      <!-- log4j2与slf4j桥接的包。(让slf4j使用log4j2记录日志)。不要和log4j-to-slf4j一起使用,会死循环!!! -->
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-slf4j-impl</artifactId>
        <version>${log4j.ver}</version>
        <scope>runtime</scope>
      </dependency>
      <!-- log4j2日志发送到sl4j。因为要做格式转换，会造成性能下降。不要和log4j-slf4j-impl一起使用,会死循环!!! -->
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-to-slf4j</artifactId>
        <version>${log4j.ver}</version>
        <scope>runtime</scope>
      </dependency>
      <!-- log4j2与JDK logging桥接的包。需要设置系统属性 -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -->
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-jul</artifactId>
        <version>${log4j.ver}</version>
        <scope>runtime</scope>
      </dependency>
      <!-- log4j2与commons-logging桥接的包。注意不要移除原来依赖的那些包 -->
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-jcl</artifactId>
        <version>${log4j.ver}</version>
        <scope>runtime</scope>
      </dependency>
      <!-- 用于web工程中的filter配置 -->
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-web</artifactId>
        <version>${log4j.ver}</version>
        <scope>runtime</scope>
      </dependency>
      <!-- 如果配置全局异步日志需要此包 -->
      <dependency>
        <groupId>com.lmax</groupId>
        <artifactId>disruptor</artifactId>
        <version>3.4.2</version>
      </dependency>

      <!-- 工具类 -->
      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>28.1-jre</version>
      </dependency>
      <!-- joda-time 作者写的让 JDK7、JDK6 可以使用 JDK8 提供的JSR310日期时间接口。 -->
      <dependency>
        <groupId>org.threeten</groupId>
        <artifactId>threetenbp</artifactId>
        <version>1.4.0</version>
      </dependency>
      <!-- joda-time 作者写的,对 JDK8 提供的JSR310日期时间接口功能的扩展。 -->
      <dependency>
        <groupId>org.threeten</groupId>
        <artifactId>threeten-extra</artifactId>
        <version>1.5.0</version>
      </dependency>
      <dependency>
        <groupId>com.github.dozermapper</groupId>
        <artifactId>dozer-core</artifactId>
        <version>6.5.0</version>
      </dependency>
      <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>1.13</version>
      </dependency>
      <dependency>
        <groupId>commons-fileupload</groupId>
        <artifactId>commons-fileupload</artifactId>
        <version>1.4</version>
      </dependency>
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-compress</artifactId>
        <version>1.19</version>
      </dependency>
      <!-- LZMA/LZMA2算法库;xz压缩格式库 -->
      <dependency>
        <groupId>org.tukaani</groupId>
        <artifactId>xz</artifactId>
        <version>1.8</version>
      </dependency>
      <!-- rar -->
      <dependency>
        <groupId>com.github.junrar</groupId>
        <artifactId>junrar</artifactId>
        <version>4.0.0</version>
      </dependency>
      <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi</artifactId>
        <version>${poi.ver}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>${poi.ver}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-scratchpad</artifactId>
        <version>${poi.ver}</version>
      </dependency>

      <!-- json -->
      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>${jackson.ver}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-core</artifactId>
        <version>${jackson.ver}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-annotations</artifactId>
        <version>${jackson.ver}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.dataformat</groupId>
        <artifactId>jackson-dataformat-yaml</artifactId>
        <version>${jackson.ver}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.dataformat</groupId>
        <artifactId>jackson-dataformat-xml</artifactId>
        <version>${jackson.ver}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.dataformat</groupId>
        <artifactId>jackson-dataformat-smile</artifactId>
        <version>${jackson.ver}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.dataformat</groupId>
        <artifactId>jackson-dataformat-cbor</artifactId>
        <version>${jackson.ver}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.datatype</groupId>
        <artifactId>jackson-datatype-jsr310</artifactId>
        <version>${jackson.ver}</version>
      </dependency>
      <dependency>
        <groupId>com.google.code.gson</groupId>
        <artifactId>gson</artifactId>
        <version>2.8.5</version>
      </dependency>
      <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>fastjson</artifactId>
        <version>1.2.62</version>
      </dependency>

      <!-- yaml -->
      <dependency>
        <groupId>org.yaml</groupId>
        <artifactId>snakeyaml</artifactId>
        <version>1.25</version>
      </dependency>

      <!-- Persistence -->
      <dependency>
        <groupId>com.zaxxer</groupId>
        <artifactId>HikariCP</artifactId>
        <version>3.4.1</version>
      </dependency>
      <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>druid</artifactId>
        <version>1.1.20</version>
        <exclusions>
          <exclusion>
            <groupId>com.alibaba</groupId>
            <artifactId>jconsole</artifactId>
          </exclusion>
          <exclusion>
            <groupId>com.alibaba</groupId>
            <artifactId>tools</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>${hibernate.ver}</version>
      </dependency>
      <dependency>
        <!-- for JPA, use hibernate-entitymanager instead of hibernate-core -->
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-entitymanager</artifactId>
        <version>${hibernate.ver}</version>
      </dependency>
      <dependency>
        <!-- optional -->
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-ehcache</artifactId>
        <version>${hibernate.ver}</version>
      </dependency>
      <dependency>
        <groupId>org.mybatis</groupId>
        <artifactId>mybatis</artifactId>
        <version>3.5.2</version>
      </dependency>
      <dependency>
        <groupId>org.mybatis</groupId>
        <artifactId>mybatis-spring</artifactId>
        <version>2.0.2</version>
      </dependency>
      <!-- JDBC Driver -->
      <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <version>1.4.199</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>org.xerial</groupId>
        <artifactId>sqlite-jdbc</artifactId>
        <version>3.28.0</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.17</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <!-- java 1.6使用jdbc4(.jre6)，1.7使用jdbc41(.jre7)，1.8使用jdbc42(无后缀) -->
        <version>42.2.8</version>
        <!-- <version>42.2.8.jre7</version> -->
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>com.oracle.jdbc</groupId>
        <artifactId>ojdbc8</artifactId>
        <version>12.2.0.1</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>org.elasticsearch.client</groupId>
        <artifactId>elasticsearch-rest-client</artifactId>
        <version>${ES.ver}</version>
      </dependency>
      <dependency>
        <groupId>org.elasticsearch.client</groupId>
        <artifactId>elasticsearch-rest-high-level-client</artifactId>
        <version>${ES.ver}</version>
      </dependency>
      <!-- redis client -->
      <dependency>
        <groupId>io.lettuce</groupId>
        <artifactId>lettuce-core</artifactId>
        <version>5.2.0.RELEASE</version>
      </dependency>
      <dependency>
        <groupId>redis.clients</groupId>
        <artifactId>jedis</artifactId>
        <version>3.1.0</version>
      </dependency>
      <!-- 队列客户端 -->
      <dependency>
        <groupId>org.apache.pulsar</groupId>
        <artifactId>pulsar-client</artifactId>
        <version>${pulsar.ver}</version>
      </dependency>
      <!-- 兼容kafka客户端接口使用pulsar主题的包装器(不需要原Kafka客户端)。不用修改原基于kafka的应用代码。 -->
      <dependency>
        <groupId>org.apache.pulsar</groupId>
        <artifactId>pulsar-client-kafka</artifactId>
        <version>${pulsar.ver}</version>
      </dependency>
      <!-- 通过原kafka客户端使用pulsar主题的包装器。代码需要修改：KafkaProducer和KafkaConsumer 改为 PulsarKafkaProducer和PulsarKafkaConsumer。 -->
      <dependency>
        <groupId>org.apache.pulsar</groupId>
        <artifactId>pulsar-client-kafka-original</artifactId>
        <version>${pulsar.ver}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka-clients</artifactId>
        <version>2.3.0</version>
      </dependency>

      <!-- git client -->
      <dependency>
        <groupId>org.eclipse.jgit</groupId>
        <artifactId>org.eclipse.jgit</artifactId>
        <version>5.5.0.201909110433-r</version>
      </dependency>
      <!-- svn client -->
      <dependency>
        <groupId>org.tmatesoft.svnkit</groupId>
        <artifactId>svnkit</artifactId>
        <version>1.10.1</version>
      </dependency>

      <!-- 基于NIO的客户、服务器端编程框架，可以快速和简单的开发出一个网络应用 -->
      <dependency>
        <groupId>io.netty</groupId>
        <artifactId>netty-all</artifactId>
        <version>4.1.42.Final</version>
      </dependency>

      <!-- 高性能TCP长连接框架 -->
      <dependency>
        <groupId>org.t-io</groupId>
        <artifactId>tio-core</artifactId>
        <version>3.5.3.v20190918-RELEASE</version>
      </dependency>
      <!-- http client -->
      <dependency>
        <groupId>com.squareup.okhttp3</groupId>
        <artifactId>okhttp</artifactId>
        <version>4.2.2</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>${httpclient.ver}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpmime</artifactId>
        <version>${httpclient.ver}</version>
      </dependency>
      <!-- Quartz -->
      <dependency>
        <groupId>org.quartz-scheduler</groupId>
        <artifactId>quartz</artifactId>
        <version>${quartz.ver}</version>
      </dependency>
      <dependency>
        <groupId>org.quartz-scheduler</groupId>
        <artifactId>quartz-jobs</artifactId>
        <version>${quartz.ver}</version>
      </dependency>

      <!-- 如果环境中有javax.mail包 可以使用这个接口包做编译依赖 -->
      <dependency>
        <groupId>javax.mail</groupId>
        <artifactId>javax.mail-api</artifactId>
        <version>1.6.2</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>com.sun.mail</groupId>
        <artifactId>javax.mail</artifactId>
        <version>1.6.2</version>
        <scope>runtime</scope>
      </dependency>

      <!-- servlet 编译期依赖包 -->
      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>4.0.1</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.tomcat</groupId>
        <artifactId>tomcat-jsp-api</artifactId>
        <version>9.0.26</version>
        <scope>provided</scope>
      </dependency>

      <!-- 通过注解在编译期生成getter/setter等 -->
      <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.10</version>
        <scope>provided</scope>
        <optional>true</optional>
      </dependency>

      <!-- j2ee -->
      <dependency>
        <groupId>javax</groupId>
        <artifactId>javaee-api</artifactId>
        <version>8.0.1</version>
      </dependency>
      
      <!-- javascript引擎 (java6~10集成javascript引擎，从java11开始，不再集成javascript引擎，但脚本接口保留) -->
      <dependency>
        <groupId>org.graalvm.js</groupId>
        <artifactId>js</artifactId>
        <version>19.2.0.1</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>
